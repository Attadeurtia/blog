<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Geoffrey</title>
    <link>http://example.org/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Geoffrey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>FR-fr</language>
    <lastBuildDate>Mon, 24 Apr 2023 17:49:47 +0200</lastBuildDate><atom:link href="http://example.org/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design Patterns</title>
      <link>http://example.org/posts/design_patterns/</link>
      <pubDate>Mon, 24 Apr 2023 17:49:47 +0200</pubDate>
      
      <guid>http://example.org/posts/design_patterns/</guid>
      <description>Design Patterns Les inconvénients des patterns :
 Ils occasionnent plus de classes Ils peuvent être peu adaptés dans des environnements dit “limités” (comme Android) c’est à encapsuler ce qui varie. Ce principe nous enseigne à limiter chaque classe à une seule responsabilité. (Cohésion) Nous savons que nous devons éviter comme la peste de changer quelque chose à une classe(Couplage)  Creational patterns Les patterns de création, relatifs à la création d’objet</description>
    </item>
    
  </channel>
</rss>
